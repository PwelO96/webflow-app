{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../node_modules/.pnpm/@finsweet+ts-utils@0.40.0/node_modules/@finsweet/ts-utils/dist/type-guards/isNotEmpty.js", "../node_modules/.pnpm/@finsweet+ts-utils@0.40.0/node_modules/@finsweet/ts-utils/dist/helpers/cloneNode.js", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\r\n", "/**\n * Makes sure a value is not `null` or `undefined`.\n * Useful for type safety when filtering empty elements from an array. Check out the example for more in-depth explanation.\n * @param value The value to type-check.\n * @example ```typescript\n * const items = [1, null, 4, undefined, 8];\n *\n * const filteredItemsError: number[] = items.filter((item) => value !== undefined && value !== null); // Type '(number | null | undefined)[]' is not assignable to type 'number[]'.\n *\n * const filteredItemsSuccess: number[] = items.filter(isNotEmpty); // Success!\n * ```\n */\nexport const isNotEmpty = (value) => value !== undefined && value !== null;\n", "/**\n * Clone a node that has the same type as the original one\n * @param node\n */\nexport const cloneNode = (node, deep = true) => node.cloneNode(deep);\n", "/* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\nimport { cloneNode, isNotEmpty } from '@finsweet/ts-utils';\r\n\r\nimport type { PokemonData, PokemonResponse } from './utils/types';\r\n\r\nwindow.Webflow ||= [];\r\nwindow.Webflow.push(async () => {\r\n  const inputLimit = document.querySelector<HTMLInputElement>('[data-element=\"input\"]');\r\n  const inputOffset = document.querySelector<HTMLInputElement>('[data-element=\"offset\"]');\r\n  if (!inputLimit || !inputOffset) return;\r\n\r\n  const updatePokemons = async () => {\r\n    const limit = Number(inputLimit.value) || 0;\r\n    const offset = Number(inputOffset.value) || 0;\r\n\r\n    const pokemonsData = await fetchPokemonsData(limit, offset);\r\n\r\n    const itemTemplate = document.querySelector<HTMLAnchorElement>('[data-element=\"pokemon-item');\r\n    if (!itemTemplate) return;\r\n\r\n    const itemsList = itemTemplate.parentElement!;\r\n\r\n    itemsList.innerHTML = '';\r\n\r\n    itemTemplate.remove();\r\n\r\n    const pokemonItems = pokemonsData.map(({ id, name, sprites }) => {\r\n      const item = cloneNode(itemTemplate);\r\n\r\n      const imageElement = item.querySelector<HTMLImageElement>('[data-element=\"pokemon-image\"]');\r\n      const idElement = item.querySelector<HTMLDivElement>('[data-element=\"pokemon-id\"]');\r\n      const nameElement = item.querySelector<HTMLDivElement>('[data-element=\"pokemon-name\"]');\r\n\r\n      if (imageElement) {\r\n        imageElement.src = sprites.other?.dream_world.front_default || sprites.front_default;\r\n      }\r\n\r\n      if (idElement) {\r\n        idElement.textContent = id.toString();\r\n      }\r\n\r\n      if (nameElement) {\r\n        nameElement.textContent = name.toString();\r\n      }\r\n\r\n      item.removeAttribute('data-cloak');\r\n\r\n      return item;\r\n    });\r\n\r\n    itemsList.append(...pokemonItems);\r\n  };\r\n\r\n  updatePokemons();\r\n\r\n  inputLimit.addEventListener('input', updatePokemons);\r\n  inputOffset.addEventListener('input', updatePokemons);\r\n});\r\n\r\nconst fetchPokemonsData = async (limit: number, offset: number): Promise<PokemonData[]> => {\r\n  try {\r\n    const url = new URL('https://pokeapi.co/api/v2/pokemon');\r\n    url.searchParams.append('limit', limit.toString());\r\n    url.searchParams.append('offset', offset.toString());\r\n\r\n    const response = await fetch(url);\r\n\r\n    const data: PokemonResponse = await response.json();\r\n\r\n    const pokemonsData = (\r\n      await Promise.all(\r\n        data.results.map(async ({ url }) => {\r\n          try {\r\n            const response = await fetch(url);\r\n            const data: PokemonData = await response.json();\r\n\r\n            return data;\r\n          } catch (err) {\r\n            return null;\r\n          }\r\n        })\r\n      )\r\n    ).filter(isNotEmpty);\r\n\r\n    return pokemonsData;\r\n  } catch (err) {\r\n    return [];\r\n  }\r\n};\r\n"],
  "mappings": ";;;AAAA,MAAI,YAAY,GAAG,uBAAY,UAAU,EAAE,iBAAiB,UAAU,MAAM,SAAS,OAAO,CAAC;;;ACYtF,MAAM,aAAa,CAAC,UAAU,UAAU,UAAa,UAAU;;;ACR/D,MAAM,YAAY,CAAC,MAAM,OAAO,SAAS,KAAK,UAAU,IAAI;;;ACEnE,SAAO,YAAY,CAAC;AACpB,SAAO,QAAQ,KAAK,YAAY;AAC9B,UAAM,aAAa,SAAS,cAAgC,wBAAwB;AACpF,UAAM,cAAc,SAAS,cAAgC,yBAAyB;AACtF,QAAI,CAAC,cAAc,CAAC,YAAa;AAEjC,UAAM,iBAAiB,YAAY;AACjC,YAAM,QAAQ,OAAO,WAAW,KAAK,KAAK;AAC1C,YAAM,SAAS,OAAO,YAAY,KAAK,KAAK;AAE5C,YAAM,eAAe,MAAM,kBAAkB,OAAO,MAAM;AAE1D,YAAM,eAAe,SAAS,cAAiC,6BAA6B;AAC5F,UAAI,CAAC,aAAc;AAEnB,YAAM,YAAY,aAAa;AAE/B,gBAAU,YAAY;AAEtB,mBAAa,OAAO;AAEpB,YAAM,eAAe,aAAa,IAAI,CAAC,EAAE,IAAI,MAAM,QAAQ,MAAM;AAC/D,cAAM,OAAO,UAAU,YAAY;AAEnC,cAAM,eAAe,KAAK,cAAgC,gCAAgC;AAC1F,cAAM,YAAY,KAAK,cAA8B,6BAA6B;AAClF,cAAM,cAAc,KAAK,cAA8B,+BAA+B;AAEtF,YAAI,cAAc;AAChB,uBAAa,MAAM,QAAQ,OAAO,YAAY,iBAAiB,QAAQ;AAAA,QACzE;AAEA,YAAI,WAAW;AACb,oBAAU,cAAc,GAAG,SAAS;AAAA,QACtC;AAEA,YAAI,aAAa;AACf,sBAAY,cAAc,KAAK,SAAS;AAAA,QAC1C;AAEA,aAAK,gBAAgB,YAAY;AAEjC,eAAO;AAAA,MACT,CAAC;AAED,gBAAU,OAAO,GAAG,YAAY;AAAA,IAClC;AAEA,mBAAe;AAEf,eAAW,iBAAiB,SAAS,cAAc;AACnD,gBAAY,iBAAiB,SAAS,cAAc;AAAA,EACtD,CAAC;AAED,MAAM,oBAAoB,OAAO,OAAe,WAA2C;AACzF,QAAI;AACF,YAAM,MAAM,IAAI,IAAI,mCAAmC;AACvD,UAAI,aAAa,OAAO,SAAS,MAAM,SAAS,CAAC;AACjD,UAAI,aAAa,OAAO,UAAU,OAAO,SAAS,CAAC;AAEnD,YAAM,WAAW,MAAM,MAAM,GAAG;AAEhC,YAAM,OAAwB,MAAM,SAAS,KAAK;AAElD,YAAM,gBACJ,MAAM,QAAQ;AAAA,QACZ,KAAK,QAAQ,IAAI,OAAO,EAAE,KAAAA,KAAI,MAAM;AAClC,cAAI;AACF,kBAAMC,YAAW,MAAM,MAAMD,IAAG;AAChC,kBAAME,QAAoB,MAAMD,UAAS,KAAK;AAE9C,mBAAOC;AAAA,UACT,SAAS,KAAK;AACZ,mBAAO;AAAA,UACT;AAAA,QACF,CAAC;AAAA,MACH,GACA,OAAO,UAAU;AAEnB,aAAO;AAAA,IACT,SAAS,KAAK;AACZ,aAAO,CAAC;AAAA,IACV;AAAA,EACF;",
  "names": ["url", "response", "data"]
}
